// <auto-generated />
using System;
using CryptoKickStake.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoKickStake.Infrastructure.Database.Migrarions
{
    [DbContext(typeof(CryptoKickStakeDbContext))]
    [Migration("20230627200600_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("ResultId")
                        .IsUnique()
                        .HasFilter("[ResultId] IS NOT NULL");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartyId"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartyId");

                    b.HasIndex("EventId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("WinnerPartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WinnerPartyId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Event", b =>
                {
                    b.HasOne("CryptoKickStake.Infrastructure.Database.Models.Result", "Result")
                        .WithOne("Event")
                        .HasForeignKey("CryptoKickStake.Infrastructure.Database.Models.Event", "ResultId");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Party", b =>
                {
                    b.HasOne("CryptoKickStake.Infrastructure.Database.Models.Event", null)
                        .WithMany("Parties")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Result", b =>
                {
                    b.HasOne("CryptoKickStake.Infrastructure.Database.Models.Party", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerPartyId");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Event", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("CryptoKickStake.Infrastructure.Database.Models.Result", b =>
                {
                    b.Navigation("Event")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
